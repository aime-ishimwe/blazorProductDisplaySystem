@page "/"
@inject HttpClient Http
@inject IJSRuntime JS

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<h3 class="mt-3">Product List with Categories</h3>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (!products.Any())
{
    <p>No products found.</p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-light">
            <tr>
                <th>Product Name</th>
                <th>Price (ZAR)</th>
                <th>Category</th>
                <th>Category Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-ZA"))</td>
                    <td>@(product.Category?.Name ?? "Uncategorized")</td>
                    <td>@(product.Category?.Description ?? "No description")</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>Add New Product</h4>

@if (categories != null && categories.Any())
{
    <EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit" FormName="AddProductForm" @key="newProduct">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Product Name</label>
            <InputText class="form-control" @bind-Value="newProduct.Name" />
            <ValidationMessage For="@(() => newProduct.Name)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Price</label>
            <InputNumber class="form-control" @bind-Value="newProduct.Price" />
            <ValidationMessage For="@(() => newProduct.Price)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Category</label>
            <InputSelect class="form-select" @bind-Value="newProduct.CategoryId">
                <option value="0" disabled>-- Select Category --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newProduct.CategoryId)" />
        </div>

        <button type="submit" class="btn btn-primary">Add Product</button>
    </EditForm>
}
else
{
    <p>Loading categories...</p>
}

@if (!string.IsNullOrWhiteSpace(formMessage))
{
    <div class="alert alert-info mt-3">@formMessage</div>
}

@code {
    private List<Product>? products;
    private List<Category> categories = new();
    private string? errorMessage;
    private string? formMessage;

    private NewProductModel newProduct = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadProductsAsync();

        if (categories.Any())
        {
            newProduct = new NewProductModel
            {
                Name = string.Empty,
                Price = null,
                CategoryId = categories.First().Id
            };
        }
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<Product>>("api/grid/products");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading products: {ex.Message}";
        }
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<Category>>("api/grid/categories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/grid/products", newProduct);
            if (response.IsSuccessStatusCode)
            {
                formMessage = "Product added successfully!";
                newProduct = new NewProductModel
                {
                    Name = string.Empty,
                    Price = null,
                    CategoryId = categories.First().Id
                };
                await LoadProductsAsync();
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                formMessage = $"Failed: {response.StatusCode} - {content}";
            }
        }
        catch (Exception ex)
        {
            formMessage = $"Error: {ex.Message}";
        }
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete product ID {productId}?");
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"api/grid/products/{productId}");
            if (response.IsSuccessStatusCode)
            {
                formMessage = "Product deleted!";
                await LoadProductsAsync();
            }
            else
            {
                formMessage = $"Delete failed: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            formMessage = $"Exception during delete: {ex.Message}";
        }
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int CategoryId { get; set; }
        public Category? Category { get; set; }
    }

    public class NewProductModel
    {
        [Required(ErrorMessage = "Product name is required")]
        public string Name { get; set; } = string.Empty;

        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than zero")]
        public decimal? Price { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Category is required")]
        public int CategoryId { get; set; } = 0;
    }
}
